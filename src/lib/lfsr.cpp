#include "lfsr.hpp"

// An LFSR with these numbers will have a period of 2^n - 1
// covering all numbers except 0 or 2^n-1, depending on the constant bit
static const uint64_t primitive_polynomials[65] =
{
    // one-based bit ("tap") indices

    //6666655555555554444444444333333333322222222221111111111000000000.
    //4321098765432109876543210987654321098765432109876543210987654321.
    //    V    v    V    v    V    v    V    v    V    v    V    v    ,
    0, // 0 is nonsense
    0b0000000000000000000000000000000000000000000000000000000000000001, // 1 - does this work?
    0b0000000000000000000000000000000000000000000000000000000000000011, // 2, 1
    0b0000000000000000000000000000000000000000000000000000000000000110, // 3, 2
    0b0000000000000000000000000000000000000000000000000000000000001100, // 4, 3
    //    V    v    V    v    V    v    V    v    V    v    V    v    ,
    0b0000000000000000000000000000000000000000000000000000000000010100, // 5, 3
    0b0000000000000000000000000000000000000000000000000000000000110000, // 6, 5
    0b0000000000000000000000000000000000000000000000000000000001100000, // 7, 6
    0b0000000000000000000000000000000000000000000000000000000010111000, // 8, 6, 5, 4
    0b0000000000000000000000000000000000000000000000000000000100010000, // 9, 5
    //    V    v    V    v    V    v    V    v    V    v    V    v    ,
    0b0000000000000000000000000000000000000000000000000000001001000000, //10, 7
    0b0000000000000000000000000000000000000000000000000000010100000000, //11, 9
    0b0000000000000000000000000000000000000000000000000000100000101001, //12, 6, 4, 1
    0b0000000000000000000000000000000000000000000000000001000000001101, //13, 4, 3, 1
    0b0000000000000000000000000000000000000000000000000010000000010101, //14, 5, 3, 1
    //    V    v    V    v    V    v    V    v    V    v    V    v    ,
    0b0000000000000000000000000000000000000000000000000110000000000000, //15,14
    0b0000000000000000000000000000000000000000000000001101000000001000, //16,15,13, 4
    0b0000000000000000000000000000000000000000000000010010000000000000, //17,14
    0b0000000000000000000000000000000000000000000000100000010000000000, //18,11
    0b0000000000000000000000000000000000000000000001000000000000100011, //19, 6, 2, 1
    //    V    v    V    v    V    v    V    v    V    v    V    v    ,
    0b0000000000000000000000000000000000000000000010010000000000000000, //20,17
    0b0000000000000000000000000000000000000000000101000000000000000000, //21,19
    0b0000000000000000000000000000000000000000001100000000000000000000, //22,21
    0b0000000000000000000000000000000000000000010000100000000000000000, //23,18
    0b0000000000000000000000000000000000000000111000010000000000000000, //24,23,22,17
    //    V    v    V    v    V    v    V    v    V    v    V    v    ,
    0b0000000000000000000000000000000000000001001000000000000000000000, //25,22
    0b0000000000000000000000000000000000000010000000000000000000100011, //26, 6, 2, 1
    0b0000000000000000000000000000000000000100000000000000000000010011, //27, 5, 2, 1
    0b0000000000000000000000000000000000001001000000000000000000000000, //28,25
    0b0000000000000000000000000000000000010100000000000000000000000000, //29,27
    //    V    v    V    v    V    v    V    v    V    v    V    v    ,
    0b0000000000000000000000000000000000100000000000000000000000101001, //30, 6, 4, 1
    0b0000000000000000000000000000000001001000000000000000000000000000, //31,28
    0b0000000000000000000000000000000010000000001000000000000000000011, //32,22, 2, 1
    0b0000000000000000000000000000000100000000000010000000000000000000, //33,20
    0b0000000000000000000000000000001000000100000000000000000000000011, //34,27, 2, 1
    //    V    v    V    v    V    v    V    v    V    v    V    v    ,
    0b0000000000000000000000000000010100000000000000000000000000000000, //35,33
    0b0000000000000000000000000000100000000001000000000000000000000000, //36,25
    0b0000000000000000000000000001000000000000000000000000000000011111, //37, 5, 4, 3, 2, 1
    0b0000000000000000000000000010000000000000000000000000000000110001, //38, 6, 5, 1
    0b0000000000000000000000000100010000000000000000000000000000000000, //39,35
    //    V    v    V    v    V    v    V    v    V    v    V    v    ,
    0b0000000000000000000000001010000000000000000101000000000000000000, //40,38,21,19
    0b0000000000000000000000010010000000000000000000000000000000000000, //41,38
    0b0000000000000000000000110000000000000000000011000000000000000000, //42,41,20,19
    0b0000000000000000000001100011000000000000000000000000000000000000, //43,42,38,37
    0b0000000000000000000011000000000000000000000000110000000000000000, //44,43,18,17
    //    V    v    V    v    V    v    V    v    V    v    V    v    ,
    0b0000000000000000000110110000000000000000000000000000000000000000, //45,44,42,41
    0b0000000000000000001100000000000000000011000000000000000000000000, //46,45,26,25
    0b0000000000000000010000100000000000000000000000000000000000000000, //47,42
    0b0000000000000000110000000000000000000000000110000000000000000000, //48,47,21,20
    0b0000000000000001000000001000000000000000000000000000000000000000, //49,40
    //    V    v    V    v    V    v    V    v    V    v    V    v    ,
    0b0000000000000011000000000000000000000000110000000000000000000000, //50,49,24,23
    0b0000000000000110000000000000110000000000000000000000000000000000, //51,50,36,35
    0b0000000000001001000000000000000000000000000000000000000000000000, //52,49
    0b0000000000011000000000000011000000000000000000000000000000000000, //53,52,38,37
    0b0000000000111000000000000000000000000000000000110000000000000000, //54,53,18,17
    //    V    v    V    v    V    v    V    v    V    v    V    v    ,
    0b0000000001000000000000000000000001000000000000000000000000000000, //55,31
    0b0000000011000000000000000000011000000000000000000000000000000000, //56,55,35,34
    0b0000000100000010000000000000000000000000000000000000000000000000, //57,50
    0b0000001000000000000000000100000000000000000000000000000000000000, //58,39
    0b0000011000000000000000000011000000000000000000000000000000000000, //59,58,38,37
    //    V    v    V    v    V    v    V    v    V    v    V    v    ,
    0b0000110000000000000000000000000000000000000000000000000000000000, //60,59
    0b0001100000000000001100000000000000000000000000000000000000000000, //61,60,46,45
    0b0011000000000000000000000000000000000000000000000000000000110000, //62,61, 6, 5
    0b0110000000000000000000000000000000000000000000000000000000000000, //63,62
    0b1101100000000000000000000000000000000000000000000000000000000000, //64,63,61,60
    //    V    v    V    v    V    v    V    v    V    v    V    v    ,
};

uint64_t lfsr_next_internal(uint64_t last, int32_t bits, bool allow_zero_state)
{
    bool next_bit = __builtin_parityll(last & primitive_polynomials[bits]) & 1;
    last <<= 1;
    last &= (-1ULL) >> (64 - bits);
    return last | (allow_zero_state ^ next_bit);
}
